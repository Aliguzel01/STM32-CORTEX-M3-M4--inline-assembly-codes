
task_scheduler1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000109c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08001244  08001244  00011244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080012f0  080012f0  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080012f0  080012f0  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080012f0  080012f0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012f0  080012f0  000112f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080012f4  080012f4  000112f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080012f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000068  08001360  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08001360  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002578  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000794  00000000  00000000  00022610  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001f8  00000000  00000000  00022da8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001b0  00000000  00000000  00022fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002c77  00000000  00000000  00023150  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000018d8  00000000  00000000  00025dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000968f  00000000  00000000  0002769f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00030d2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c54  00000000  00000000  00030dac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000068 	.word	0x20000068
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800122c 	.word	0x0800122c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000006c 	.word	0x2000006c
 80001e4:	0800122c 	.word	0x0800122c

080001e8 <delay>:
#include "led.h"



void delay(uint32_t count)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
  for(uint32_t i = 0 ; i < count ; i++);
 80001f0:	2300      	movs	r3, #0
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	e002      	b.n	80001fc <delay+0x14>
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	3301      	adds	r3, #1
 80001fa:	60fb      	str	r3, [r7, #12]
 80001fc:	68fa      	ldr	r2, [r7, #12]
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	429a      	cmp	r2, r3
 8000202:	d3f8      	bcc.n	80001f6 <delay+0xe>
}
 8000204:	bf00      	nop
 8000206:	3714      	adds	r7, #20
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr

08000210 <led_init_all>:

void led_init_all(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 8000216:	4b19      	ldr	r3, [pc, #100]	; (800027c <led_init_all+0x6c>)
 8000218:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020C00;
 800021a:	4b19      	ldr	r3, [pc, #100]	; (8000280 <led_init_all+0x70>)
 800021c:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= ( 1 << 3);
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f043 0208 	orr.w	r2, r3, #8
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE));
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_GREEN);
 800025a:	200c      	movs	r0, #12
 800025c:	f000 f82a 	bl	80002b4 <led_off>
    led_off(LED_ORANGE);
 8000260:	200d      	movs	r0, #13
 8000262:	f000 f827 	bl	80002b4 <led_off>
    led_off(LED_RED);
 8000266:	200e      	movs	r0, #14
 8000268:	f000 f824 	bl	80002b4 <led_off>
    led_off(LED_BLUE);
 800026c:	200f      	movs	r0, #15
 800026e:	f000 f821 	bl	80002b4 <led_off>



}
 8000272:	bf00      	nop
 8000274:	3708      	adds	r7, #8
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	40023830 	.word	0x40023830
 8000280:	40020c00 	.word	0x40020c00

08000284 <led_on>:

void led_on(uint8_t led_no)
{
 8000284:	b480      	push	{r7}
 8000286:	b085      	sub	sp, #20
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 800028e:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <led_on+0x2c>)
 8000290:	60fb      	str	r3, [r7, #12]
  *pGpiodDataReg |= ( 1 << led_no);
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	79fa      	ldrb	r2, [r7, #7]
 8000298:	2101      	movs	r1, #1
 800029a:	fa01 f202 	lsl.w	r2, r1, r2
 800029e:	431a      	orrs	r2, r3
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	601a      	str	r2, [r3, #0]

}
 80002a4:	bf00      	nop
 80002a6:	3714      	adds	r7, #20
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr
 80002b0:	40020c14 	.word	0x40020c14

080002b4 <led_off>:

void led_off(uint8_t led_no)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 80002be:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <led_off+0x30>)
 80002c0:	60fb      	str	r3, [r7, #12]
	  *pGpiodDataReg &= ~( 1 << led_no);
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	79fa      	ldrb	r2, [r7, #7]
 80002c8:	2101      	movs	r1, #1
 80002ca:	fa01 f202 	lsl.w	r2, r1, r2
 80002ce:	43d2      	mvns	r2, r2
 80002d0:	401a      	ands	r2, r3
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	601a      	str	r2, [r3, #0]

}
 80002d6:	bf00      	nop
 80002d8:	3714      	adds	r7, #20
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	40020c14 	.word	0x40020c14

080002e8 <main>:

/* Each task has its own TCB */
TCB_t user_tasks[MAX_TASKS];

int main(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0

	enable_processor_faults();
 80002ec:	f000 f928 	bl	8000540 <enable_processor_faults>

	init_scheduler_stack(SCHED_STACK_START);
 80002f0:	4807      	ldr	r0, [pc, #28]	; (8000310 <main+0x28>)
 80002f2:	f000 f891 	bl	8000418 <init_scheduler_stack>

	init_tasks_stack();
 80002f6:	f000 f895 	bl	8000424 <init_tasks_stack>

	led_init_all();
 80002fa:	f7ff ff89 	bl	8000210 <led_init_all>

	init_systick_timer(TICK_HZ);
 80002fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000302:	f000 f853 	bl	80003ac <init_systick_timer>

	switch_sp_to_psp();
 8000306:	f000 f9a7 	bl	8000658 <switch_sp_to_psp>

	task1_handler();
 800030a:	f000 f807 	bl	800031c <task1_handler>

	for(;;);
 800030e:	e7fe      	b.n	800030e <main+0x26>
 8000310:	2001ec00 	.word	0x2001ec00

08000314 <idle_task>:
}


void idle_task(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
	while(1);
 8000318:	e7fe      	b.n	8000318 <idle_task+0x4>
	...

0800031c <task1_handler>:
}


void task1_handler(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_GREEN);
 8000320:	200c      	movs	r0, #12
 8000322:	f7ff ffaf 	bl	8000284 <led_on>
		delay(DELAY_COUNT_1S);
 8000326:	4805      	ldr	r0, [pc, #20]	; (800033c <task1_handler+0x20>)
 8000328:	f7ff ff5e 	bl	80001e8 <delay>
		led_off(LED_GREEN);
 800032c:	200c      	movs	r0, #12
 800032e:	f7ff ffc1 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_1S);
 8000332:	4802      	ldr	r0, [pc, #8]	; (800033c <task1_handler+0x20>)
 8000334:	f7ff ff58 	bl	80001e8 <delay>
		led_on(LED_GREEN);
 8000338:	e7f2      	b.n	8000320 <task1_handler+0x4>
 800033a:	bf00      	nop
 800033c:	001312d0 	.word	0x001312d0

08000340 <task2_handler>:
	}

}

void task2_handler(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_ORANGE);
 8000344:	200d      	movs	r0, #13
 8000346:	f7ff ff9d 	bl	8000284 <led_on>
		delay(DELAY_COUNT_500MS);
 800034a:	4805      	ldr	r0, [pc, #20]	; (8000360 <task2_handler+0x20>)
 800034c:	f7ff ff4c 	bl	80001e8 <delay>
		led_off(LED_ORANGE);
 8000350:	200d      	movs	r0, #13
 8000352:	f7ff ffaf 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_500MS);
 8000356:	4802      	ldr	r0, [pc, #8]	; (8000360 <task2_handler+0x20>)
 8000358:	f7ff ff46 	bl	80001e8 <delay>
		led_on(LED_ORANGE);
 800035c:	e7f2      	b.n	8000344 <task2_handler+0x4>
 800035e:	bf00      	nop
 8000360:	00098968 	.word	0x00098968

08000364 <task3_handler>:
	}

}

void task3_handler(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_BLUE);
 8000368:	200f      	movs	r0, #15
 800036a:	f7ff ff8b 	bl	8000284 <led_on>
		delay(DELAY_COUNT_250MS);
 800036e:	4805      	ldr	r0, [pc, #20]	; (8000384 <task3_handler+0x20>)
 8000370:	f7ff ff3a 	bl	80001e8 <delay>
		led_off(LED_BLUE);
 8000374:	200f      	movs	r0, #15
 8000376:	f7ff ff9d 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_250MS);
 800037a:	4802      	ldr	r0, [pc, #8]	; (8000384 <task3_handler+0x20>)
 800037c:	f7ff ff34 	bl	80001e8 <delay>
		led_on(LED_BLUE);
 8000380:	e7f2      	b.n	8000368 <task3_handler+0x4>
 8000382:	bf00      	nop
 8000384:	0004c4b4 	.word	0x0004c4b4

08000388 <task4_handler>:

}

void task4_handler(void)

{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_RED);
 800038c:	200e      	movs	r0, #14
 800038e:	f7ff ff79 	bl	8000284 <led_on>
		delay(DELAY_COUNT_125MS);
 8000392:	4805      	ldr	r0, [pc, #20]	; (80003a8 <task4_handler+0x20>)
 8000394:	f7ff ff28 	bl	80001e8 <delay>
		led_off(LED_RED);
 8000398:	200e      	movs	r0, #14
 800039a:	f7ff ff8b 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_125MS);
 800039e:	4802      	ldr	r0, [pc, #8]	; (80003a8 <task4_handler+0x20>)
 80003a0:	f7ff ff22 	bl	80001e8 <delay>
		led_on(LED_RED);
 80003a4:	e7f2      	b.n	800038c <task4_handler+0x4>
 80003a6:	bf00      	nop
 80003a8:	0002625a 	.word	0x0002625a

080003ac <init_systick_timer>:

}


void init_systick_timer(uint32_t tick_hz)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b087      	sub	sp, #28
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 80003b4:	4b15      	ldr	r3, [pc, #84]	; (800040c <init_systick_timer+0x60>)
 80003b6:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 80003b8:	4b15      	ldr	r3, [pc, #84]	; (8000410 <init_systick_timer+0x64>)
 80003ba:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 80003bc:	4a15      	ldr	r2, [pc, #84]	; (8000414 <init_systick_timer+0x68>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80003c4:	3b01      	subs	r3, #1
 80003c6:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 80003ce:	697b      	ldr	r3, [r7, #20]
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	431a      	orrs	r2, r3
 80003d6:	697b      	ldr	r3, [r7, #20]
 80003d8:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 80003da:	693b      	ldr	r3, [r7, #16]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f043 0202 	orr.w	r2, r3, #2
 80003e2:	693b      	ldr	r3, [r7, #16]
 80003e4:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 80003e6:	693b      	ldr	r3, [r7, #16]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f043 0204 	orr.w	r2, r3, #4
 80003ee:	693b      	ldr	r3, [r7, #16]
 80003f0:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 80003f2:	693b      	ldr	r3, [r7, #16]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f043 0201 	orr.w	r2, r3, #1
 80003fa:	693b      	ldr	r3, [r7, #16]
 80003fc:	601a      	str	r2, [r3, #0]

}
 80003fe:	bf00      	nop
 8000400:	371c      	adds	r7, #28
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	e000e014 	.word	0xe000e014
 8000410:	e000e010 	.word	0xe000e010
 8000414:	00f42400 	.word	0x00f42400

08000418 <init_scheduler_stack>:


__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 8000418:	4603      	mov	r3, r0
     __asm volatile("MSR MSP,%0": :  "r" (sched_top_of_stack)  :   );
 800041a:	f383 8808 	msr	MSP, r3
     __asm volatile("BX LR");
 800041e:	4770      	bx	lr

}
 8000420:	bf00      	nop
	...

08000424 <init_tasks_stack>:


/* this function stores dummy stack contents for each task */

void init_tasks_stack(void)
{
 8000424:	b480      	push	{r7}
 8000426:	b085      	sub	sp, #20
 8000428:	af00      	add	r7, sp, #0

	user_tasks[0].current_state = TASK_READY_STATE;
 800042a:	4b3a      	ldr	r3, [pc, #232]	; (8000514 <init_tasks_stack+0xf0>)
 800042c:	2200      	movs	r2, #0
 800042e:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_READY_STATE;
 8000430:	4b38      	ldr	r3, [pc, #224]	; (8000514 <init_tasks_stack+0xf0>)
 8000432:	2200      	movs	r2, #0
 8000434:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_READY_STATE;
 8000436:	4b37      	ldr	r3, [pc, #220]	; (8000514 <init_tasks_stack+0xf0>)
 8000438:	2200      	movs	r2, #0
 800043a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	user_tasks[3].current_state = TASK_READY_STATE;
 800043e:	4b35      	ldr	r3, [pc, #212]	; (8000514 <init_tasks_stack+0xf0>)
 8000440:	2200      	movs	r2, #0
 8000442:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	user_tasks[4].current_state = TASK_READY_STATE;
 8000446:	4b33      	ldr	r3, [pc, #204]	; (8000514 <init_tasks_stack+0xf0>)
 8000448:	2200      	movs	r2, #0
 800044a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	user_tasks[0].psp_value = IDLE_STACK_START;
 800044e:	4b31      	ldr	r3, [pc, #196]	; (8000514 <init_tasks_stack+0xf0>)
 8000450:	4a31      	ldr	r2, [pc, #196]	; (8000518 <init_tasks_stack+0xf4>)
 8000452:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T1_STACK_START;
 8000454:	4b2f      	ldr	r3, [pc, #188]	; (8000514 <init_tasks_stack+0xf0>)
 8000456:	4a31      	ldr	r2, [pc, #196]	; (800051c <init_tasks_stack+0xf8>)
 8000458:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T2_STACK_START;
 800045a:	4b2e      	ldr	r3, [pc, #184]	; (8000514 <init_tasks_stack+0xf0>)
 800045c:	4a30      	ldr	r2, [pc, #192]	; (8000520 <init_tasks_stack+0xfc>)
 800045e:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T3_STACK_START;
 8000460:	4b2c      	ldr	r3, [pc, #176]	; (8000514 <init_tasks_stack+0xf0>)
 8000462:	4a30      	ldr	r2, [pc, #192]	; (8000524 <init_tasks_stack+0x100>)
 8000464:	631a      	str	r2, [r3, #48]	; 0x30
	user_tasks[4].psp_value = T4_STACK_START;
 8000466:	4b2b      	ldr	r3, [pc, #172]	; (8000514 <init_tasks_stack+0xf0>)
 8000468:	4a2f      	ldr	r2, [pc, #188]	; (8000528 <init_tasks_stack+0x104>)
 800046a:	641a      	str	r2, [r3, #64]	; 0x40

	user_tasks[0].task_handler = idle_task;
 800046c:	4b29      	ldr	r3, [pc, #164]	; (8000514 <init_tasks_stack+0xf0>)
 800046e:	4a2f      	ldr	r2, [pc, #188]	; (800052c <init_tasks_stack+0x108>)
 8000470:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task1_handler;
 8000472:	4b28      	ldr	r3, [pc, #160]	; (8000514 <init_tasks_stack+0xf0>)
 8000474:	4a2e      	ldr	r2, [pc, #184]	; (8000530 <init_tasks_stack+0x10c>)
 8000476:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task2_handler;
 8000478:	4b26      	ldr	r3, [pc, #152]	; (8000514 <init_tasks_stack+0xf0>)
 800047a:	4a2e      	ldr	r2, [pc, #184]	; (8000534 <init_tasks_stack+0x110>)
 800047c:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = task3_handler;
 800047e:	4b25      	ldr	r3, [pc, #148]	; (8000514 <init_tasks_stack+0xf0>)
 8000480:	4a2d      	ldr	r2, [pc, #180]	; (8000538 <init_tasks_stack+0x114>)
 8000482:	63da      	str	r2, [r3, #60]	; 0x3c
	user_tasks[4].task_handler = task4_handler;
 8000484:	4b23      	ldr	r3, [pc, #140]	; (8000514 <init_tasks_stack+0xf0>)
 8000486:	4a2d      	ldr	r2, [pc, #180]	; (800053c <init_tasks_stack+0x118>)
 8000488:	64da      	str	r2, [r3, #76]	; 0x4c


	uint32_t *pPSP;

	for(int i = 0 ; i < MAX_TASKS ;i++)
 800048a:	2300      	movs	r3, #0
 800048c:	60bb      	str	r3, [r7, #8]
 800048e:	e037      	b.n	8000500 <init_tasks_stack+0xdc>
	{
		pPSP = (uint32_t*) user_tasks[i].psp_value;
 8000490:	4a20      	ldr	r2, [pc, #128]	; (8000514 <init_tasks_stack+0xf0>)
 8000492:	68bb      	ldr	r3, [r7, #8]
 8000494:	011b      	lsls	r3, r3, #4
 8000496:	4413      	add	r3, r2
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	60fb      	str	r3, [r7, #12]

		pPSP--;
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	3b04      	subs	r3, #4
 80004a0:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR;//0x01000000
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80004a8:	601a      	str	r2, [r3, #0]

		pPSP--; //PC
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	3b04      	subs	r3, #4
 80004ae:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t) user_tasks[i].task_handler;
 80004b0:	4a18      	ldr	r2, [pc, #96]	; (8000514 <init_tasks_stack+0xf0>)
 80004b2:	68bb      	ldr	r3, [r7, #8]
 80004b4:	011b      	lsls	r3, r3, #4
 80004b6:	4413      	add	r3, r2
 80004b8:	330c      	adds	r3, #12
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	461a      	mov	r2, r3
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	601a      	str	r2, [r3, #0]

		pPSP--; //LR
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	3b04      	subs	r3, #4
 80004c6:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	f06f 0202 	mvn.w	r2, #2
 80004ce:	601a      	str	r2, [r3, #0]

		for(int j = 0 ; j < 13 ; j++)
 80004d0:	2300      	movs	r3, #0
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	e008      	b.n	80004e8 <init_tasks_stack+0xc4>
		{
			pPSP--;
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	3b04      	subs	r3, #4
 80004da:	60fb      	str	r3, [r7, #12]
		    *pPSP = 0;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
		for(int j = 0 ; j < 13 ; j++)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	3301      	adds	r3, #1
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2b0c      	cmp	r3, #12
 80004ec:	ddf3      	ble.n	80004d6 <init_tasks_stack+0xb2>

		}

		user_tasks[i].psp_value = (uint32_t)pPSP;
 80004ee:	68fa      	ldr	r2, [r7, #12]
 80004f0:	4908      	ldr	r1, [pc, #32]	; (8000514 <init_tasks_stack+0xf0>)
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	011b      	lsls	r3, r3, #4
 80004f6:	440b      	add	r3, r1
 80004f8:	601a      	str	r2, [r3, #0]
	for(int i = 0 ; i < MAX_TASKS ;i++)
 80004fa:	68bb      	ldr	r3, [r7, #8]
 80004fc:	3301      	adds	r3, #1
 80004fe:	60bb      	str	r3, [r7, #8]
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	2b04      	cmp	r3, #4
 8000504:	ddc4      	ble.n	8000490 <init_tasks_stack+0x6c>


	}

}
 8000506:	bf00      	nop
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	20000094 	.word	0x20000094
 8000518:	2001f000 	.word	0x2001f000
 800051c:	20020000 	.word	0x20020000
 8000520:	2001fc00 	.word	0x2001fc00
 8000524:	2001f800 	.word	0x2001f800
 8000528:	2001f400 	.word	0x2001f400
 800052c:	08000315 	.word	0x08000315
 8000530:	0800031d 	.word	0x0800031d
 8000534:	08000341 	.word	0x08000341
 8000538:	08000365 	.word	0x08000365
 800053c:	08000389 	.word	0x08000389

08000540 <enable_processor_faults>:

void enable_processor_faults(void)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 8000546:	4b0d      	ldr	r3, [pc, #52]	; (800057c <enable_processor_faults+0x3c>)
 8000548:	607b      	str	r3, [r7, #4]

	*pSHCSR |= ( 1 << 16); //mem manage
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 17); //bus fault
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 18); //usage fault
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	601a      	str	r2, [r3, #0]
}
 800056e:	bf00      	nop
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	e000ed24 	.word	0xe000ed24

08000580 <get_psp_value>:


uint32_t get_psp_value(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0

	return user_tasks[current_task].psp_value;
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <get_psp_value+0x1c>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	4a05      	ldr	r2, [pc, #20]	; (80005a0 <get_psp_value+0x20>)
 800058a:	011b      	lsls	r3, r3, #4
 800058c:	4413      	add	r3, r2
 800058e:	681b      	ldr	r3, [r3, #0]
}
 8000590:	4618      	mov	r0, r3
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000000 	.word	0x20000000
 80005a0:	20000094 	.word	0x20000094

080005a4 <save_psp_value>:


void save_psp_value(uint32_t current_psp_value)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp_value;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <save_psp_value+0x24>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	4a06      	ldr	r2, [pc, #24]	; (80005cc <save_psp_value+0x28>)
 80005b2:	011b      	lsls	r3, r3, #4
 80005b4:	4413      	add	r3, r2
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	601a      	str	r2, [r3, #0]
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000000 	.word	0x20000000
 80005cc:	20000094 	.word	0x20000094

080005d0 <update_next_task>:


void update_next_task(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
	int state = TASK_BLOCKED_STATE;
 80005d6:	23ff      	movs	r3, #255	; 0xff
 80005d8:	607b      	str	r3, [r7, #4]

	for(int i= 0 ; i < (MAX_TASKS) ; i++)
 80005da:	2300      	movs	r3, #0
 80005dc:	603b      	str	r3, [r7, #0]
 80005de:	e024      	b.n	800062a <update_next_task+0x5a>
	{
		current_task++;
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <update_next_task+0x7c>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	4b18      	ldr	r3, [pc, #96]	; (800064c <update_next_task+0x7c>)
 80005ea:	701a      	strb	r2, [r3, #0]
	    current_task %= MAX_TASKS;
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <update_next_task+0x7c>)
 80005ee:	781a      	ldrb	r2, [r3, #0]
 80005f0:	4b17      	ldr	r3, [pc, #92]	; (8000650 <update_next_task+0x80>)
 80005f2:	fba3 1302 	umull	r1, r3, r3, r2
 80005f6:	0899      	lsrs	r1, r3, #2
 80005f8:	460b      	mov	r3, r1
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	440b      	add	r3, r1
 80005fe:	1ad3      	subs	r3, r2, r3
 8000600:	b2da      	uxtb	r2, r3
 8000602:	4b12      	ldr	r3, [pc, #72]	; (800064c <update_next_task+0x7c>)
 8000604:	701a      	strb	r2, [r3, #0]
		state = user_tasks[current_task].current_state;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <update_next_task+0x7c>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	4a12      	ldr	r2, [pc, #72]	; (8000654 <update_next_task+0x84>)
 800060c:	011b      	lsls	r3, r3, #4
 800060e:	4413      	add	r3, r2
 8000610:	3308      	adds	r3, #8
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	607b      	str	r3, [r7, #4]
		if( (state == TASK_READY_STATE) && (current_task != 0) )
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d103      	bne.n	8000624 <update_next_task+0x54>
 800061c:	4b0b      	ldr	r3, [pc, #44]	; (800064c <update_next_task+0x7c>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d106      	bne.n	8000632 <update_next_task+0x62>
	for(int i= 0 ; i < (MAX_TASKS) ; i++)
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	3301      	adds	r3, #1
 8000628:	603b      	str	r3, [r7, #0]
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	2b04      	cmp	r3, #4
 800062e:	ddd7      	ble.n	80005e0 <update_next_task+0x10>
 8000630:	e000      	b.n	8000634 <update_next_task+0x64>
			break;
 8000632:	bf00      	nop
	}

	if(state != TASK_READY_STATE)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d002      	beq.n	8000640 <update_next_task+0x70>
		current_task = 0;
 800063a:	4b04      	ldr	r3, [pc, #16]	; (800064c <update_next_task+0x7c>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	20000000 	.word	0x20000000
 8000650:	cccccccd 	.word	0xcccccccd
 8000654:	20000094 	.word	0x20000094

08000658 <switch_sp_to_psp>:
__attribute__((naked)) void switch_sp_to_psp(void)
{
    //1. initialize the PSP with TASK1 stack start address

	//get the value of psp of current_task
	__asm volatile ("PUSH {LR}"); //preserve LR which connects back to main()
 8000658:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value");
 800065a:	f7ff ff91 	bl	8000580 <get_psp_value>
	__asm volatile ("MSR PSP,R0"); //initialize psp
 800065e:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}");  //pops back LR value
 8000662:	f85d eb04 	ldr.w	lr, [sp], #4

	//2. change SP to PSP using CONTROL register
	__asm volatile ("MOV R0,#0X02");
 8000666:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL,R0");
 800066a:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 800066e:	4770      	bx	lr
}
 8000670:	bf00      	nop

08000672 <PendSV_Handler>:
{

	/*Save the context of current task */

	//1. Get current running task's PSP value
	__asm volatile("MRS R0,PSP");
 8000672:	f3ef 8009 	mrs	r0, PSP
	//2. Using that PSP value store SF2( R4 to R11)
	__asm volatile("STMDB R0!,{R4-R11}");
 8000676:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	__asm volatile("PUSH {LR}");
 800067a:	b500      	push	{lr}

	//3. Save the current value of PSP
    __asm volatile("BL save_psp_value");
 800067c:	f7ff ff92 	bl	80005a4 <save_psp_value>


	/*Retrieve the context of next task */

	//1. Decide next task to run
    __asm volatile("BL update_next_task");
 8000680:	f7ff ffa6 	bl	80005d0 <update_next_task>

	//2. get its past PSP value
	__asm volatile ("BL get_psp_value");
 8000684:	f7ff ff7c 	bl	8000580 <get_psp_value>

	//3. Using that PSP value retrieve SF2(R4 to R11)
	__asm volatile ("LDMIA R0!,{R4-R11}");
 8000688:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	//4. update PSP and exit
	__asm volatile("MSR PSP,R0");
 800068c:	f380 8809 	msr	PSP, r0

	__asm volatile("POP {LR}");
 8000690:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile("BX LR");
 8000694:	4770      	bx	lr



}
 8000696:	bf00      	nop

08000698 <update_global_tick_count>:


void update_global_tick_count(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
	g_tick_count++;
 800069c:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <update_global_tick_count+0x18>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	3301      	adds	r3, #1
 80006a2:	4a03      	ldr	r2, [pc, #12]	; (80006b0 <update_global_tick_count+0x18>)
 80006a4:	6013      	str	r3, [r2, #0]
}
 80006a6:	bf00      	nop
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	20000084 	.word	0x20000084

080006b4 <unblock_tasks>:

void unblock_tasks(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
	for(int i = 1 ; i < MAX_TASKS ; i++)
 80006ba:	2301      	movs	r3, #1
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	e01b      	b.n	80006f8 <unblock_tasks+0x44>
	{
		if(user_tasks[i].current_state != TASK_READY_STATE)
 80006c0:	4a12      	ldr	r2, [pc, #72]	; (800070c <unblock_tasks+0x58>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	011b      	lsls	r3, r3, #4
 80006c6:	4413      	add	r3, r2
 80006c8:	3308      	adds	r3, #8
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d010      	beq.n	80006f2 <unblock_tasks+0x3e>
		{
			if(user_tasks[i].block_count == g_tick_count)
 80006d0:	4a0e      	ldr	r2, [pc, #56]	; (800070c <unblock_tasks+0x58>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	011b      	lsls	r3, r3, #4
 80006d6:	4413      	add	r3, r2
 80006d8:	3304      	adds	r3, #4
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <unblock_tasks+0x5c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d106      	bne.n	80006f2 <unblock_tasks+0x3e>
			{
				user_tasks[i].current_state = TASK_READY_STATE;
 80006e4:	4a09      	ldr	r2, [pc, #36]	; (800070c <unblock_tasks+0x58>)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	011b      	lsls	r3, r3, #4
 80006ea:	4413      	add	r3, r2
 80006ec:	3308      	adds	r3, #8
 80006ee:	2200      	movs	r2, #0
 80006f0:	701a      	strb	r2, [r3, #0]
	for(int i = 1 ; i < MAX_TASKS ; i++)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	3301      	adds	r3, #1
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2b04      	cmp	r3, #4
 80006fc:	dde0      	ble.n	80006c0 <unblock_tasks+0xc>
			}
		}

	}

}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	20000094 	.word	0x20000094
 8000710:	20000084 	.word	0x20000084

08000714 <SysTick_Handler>:


void  SysTick_Handler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0

	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <SysTick_Handler+0x28>)
 800071c:	607b      	str	r3, [r7, #4]

    update_global_tick_count();
 800071e:	f7ff ffbb 	bl	8000698 <update_global_tick_count>

    unblock_tasks();
 8000722:	f7ff ffc7 	bl	80006b4 <unblock_tasks>

    //pend the pendsv exception
    *pICSR |= ( 1 << 28);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	601a      	str	r2, [r3, #0]
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	e000ed04 	.word	0xe000ed04

08000740 <HardFault_Handler>:

//2. implement the fault handlers
void HardFault_Handler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	printf("Exception : Hardfault\n");
 8000744:	4801      	ldr	r0, [pc, #4]	; (800074c <HardFault_Handler+0xc>)
 8000746:	f000 f965 	bl	8000a14 <puts>
	while(1);
 800074a:	e7fe      	b.n	800074a <HardFault_Handler+0xa>
 800074c:	08001244 	.word	0x08001244

08000750 <MemManage_Handler>:
}


void MemManage_Handler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	printf("Exception : MemManage\n");
 8000754:	4801      	ldr	r0, [pc, #4]	; (800075c <MemManage_Handler+0xc>)
 8000756:	f000 f95d 	bl	8000a14 <puts>
	while(1);
 800075a:	e7fe      	b.n	800075a <MemManage_Handler+0xa>
 800075c:	0800125c 	.word	0x0800125c

08000760 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 8000764:	4801      	ldr	r0, [pc, #4]	; (800076c <BusFault_Handler+0xc>)
 8000766:	f000 f955 	bl	8000a14 <puts>
	while(1);
 800076a:	e7fe      	b.n	800076a <BusFault_Handler+0xa>
 800076c:	08001274 	.word	0x08001274

08000770 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	e00a      	b.n	8000798 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000782:	f3af 8000 	nop.w
 8000786:	4601      	mov	r1, r0
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	1c5a      	adds	r2, r3, #1
 800078c:	60ba      	str	r2, [r7, #8]
 800078e:	b2ca      	uxtb	r2, r1
 8000790:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	3301      	adds	r3, #1
 8000796:	617b      	str	r3, [r7, #20]
 8000798:	697a      	ldr	r2, [r7, #20]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	429a      	cmp	r2, r3
 800079e:	dbf0      	blt.n	8000782 <_read+0x12>
	}

return len;
 80007a0:	687b      	ldr	r3, [r7, #4]
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3718      	adds	r7, #24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b086      	sub	sp, #24
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	60f8      	str	r0, [r7, #12]
 80007b2:	60b9      	str	r1, [r7, #8]
 80007b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
 80007ba:	e009      	b.n	80007d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	1c5a      	adds	r2, r3, #1
 80007c0:	60ba      	str	r2, [r7, #8]
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	3301      	adds	r3, #1
 80007ce:	617b      	str	r3, [r7, #20]
 80007d0:	697a      	ldr	r2, [r7, #20]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	dbf1      	blt.n	80007bc <_write+0x12>
	}
	return len;
 80007d8:	687b      	ldr	r3, [r7, #4]
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <_close>:

int _close(int file)
{
 80007e2:	b480      	push	{r7}
 80007e4:	b083      	sub	sp, #12
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
	return -1;
 80007ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr

080007fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007fa:	b480      	push	{r7}
 80007fc:	b083      	sub	sp, #12
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
 8000802:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800080a:	605a      	str	r2, [r3, #4]
	return 0;
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <_isatty>:

int _isatty(int file)
{
 800081a:	b480      	push	{r7}
 800081c:	b083      	sub	sp, #12
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
	return 1;
 8000822:	2301      	movs	r3, #1
}
 8000824:	4618      	mov	r0, r3
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	607a      	str	r2, [r7, #4]
	return 0;
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3714      	adds	r7, #20
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
	...

0800084c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <_sbrk+0x50>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d102      	bne.n	8000862 <_sbrk+0x16>
		heap_end = &end;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <_sbrk+0x50>)
 800085e:	4a10      	ldr	r2, [pc, #64]	; (80008a0 <_sbrk+0x54>)
 8000860:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <_sbrk+0x50>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <_sbrk+0x50>)
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4413      	add	r3, r2
 8000870:	466a      	mov	r2, sp
 8000872:	4293      	cmp	r3, r2
 8000874:	d907      	bls.n	8000886 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000876:	f000 f83f 	bl	80008f8 <__errno>
 800087a:	4602      	mov	r2, r0
 800087c:	230c      	movs	r3, #12
 800087e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000880:	f04f 33ff 	mov.w	r3, #4294967295
 8000884:	e006      	b.n	8000894 <_sbrk+0x48>
	}

	heap_end += incr;
 8000886:	4b05      	ldr	r3, [pc, #20]	; (800089c <_sbrk+0x50>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4413      	add	r3, r2
 800088e:	4a03      	ldr	r2, [pc, #12]	; (800089c <_sbrk+0x50>)
 8000890:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000892:	68fb      	ldr	r3, [r7, #12]
}
 8000894:	4618      	mov	r0, r3
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000088 	.word	0x20000088
 80008a0:	200000e8 	.word	0x200000e8

080008a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008a4:	480d      	ldr	r0, [pc, #52]	; (80008dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008a6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a8:	480d      	ldr	r0, [pc, #52]	; (80008e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80008aa:	490e      	ldr	r1, [pc, #56]	; (80008e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008ac:	4a0e      	ldr	r2, [pc, #56]	; (80008e8 <LoopForever+0xe>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b0:	e002      	b.n	80008b8 <LoopCopyDataInit>

080008b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b6:	3304      	adds	r3, #4

080008b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008bc:	d3f9      	bcc.n	80008b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008be:	4a0b      	ldr	r2, [pc, #44]	; (80008ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c0:	4c0b      	ldr	r4, [pc, #44]	; (80008f0 <LoopForever+0x16>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c4:	e001      	b.n	80008ca <LoopFillZerobss>

080008c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c8:	3204      	adds	r2, #4

080008ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008cc:	d3fb      	bcc.n	80008c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008ce:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80008d2:	f000 f817 	bl	8000904 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008d6:	f7ff fd07 	bl	80002e8 <main>

080008da <LoopForever>:

LoopForever:
    b LoopForever
 80008da:	e7fe      	b.n	80008da <LoopForever>
  ldr   r0, =_estack
 80008dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80008e8:	080012f8 	.word	0x080012f8
  ldr r2, =_sbss
 80008ec:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80008f0:	200000e8 	.word	0x200000e8

080008f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008f4:	e7fe      	b.n	80008f4 <ADC_IRQHandler>
	...

080008f8 <__errno>:
 80008f8:	4b01      	ldr	r3, [pc, #4]	; (8000900 <__errno+0x8>)
 80008fa:	6818      	ldr	r0, [r3, #0]
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	20000004 	.word	0x20000004

08000904 <__libc_init_array>:
 8000904:	b570      	push	{r4, r5, r6, lr}
 8000906:	4e0d      	ldr	r6, [pc, #52]	; (800093c <__libc_init_array+0x38>)
 8000908:	4c0d      	ldr	r4, [pc, #52]	; (8000940 <__libc_init_array+0x3c>)
 800090a:	1ba4      	subs	r4, r4, r6
 800090c:	10a4      	asrs	r4, r4, #2
 800090e:	2500      	movs	r5, #0
 8000910:	42a5      	cmp	r5, r4
 8000912:	d109      	bne.n	8000928 <__libc_init_array+0x24>
 8000914:	4e0b      	ldr	r6, [pc, #44]	; (8000944 <__libc_init_array+0x40>)
 8000916:	4c0c      	ldr	r4, [pc, #48]	; (8000948 <__libc_init_array+0x44>)
 8000918:	f000 fc88 	bl	800122c <_init>
 800091c:	1ba4      	subs	r4, r4, r6
 800091e:	10a4      	asrs	r4, r4, #2
 8000920:	2500      	movs	r5, #0
 8000922:	42a5      	cmp	r5, r4
 8000924:	d105      	bne.n	8000932 <__libc_init_array+0x2e>
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800092c:	4798      	blx	r3
 800092e:	3501      	adds	r5, #1
 8000930:	e7ee      	b.n	8000910 <__libc_init_array+0xc>
 8000932:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000936:	4798      	blx	r3
 8000938:	3501      	adds	r5, #1
 800093a:	e7f2      	b.n	8000922 <__libc_init_array+0x1e>
 800093c:	080012f0 	.word	0x080012f0
 8000940:	080012f0 	.word	0x080012f0
 8000944:	080012f0 	.word	0x080012f0
 8000948:	080012f4 	.word	0x080012f4

0800094c <memset>:
 800094c:	4402      	add	r2, r0
 800094e:	4603      	mov	r3, r0
 8000950:	4293      	cmp	r3, r2
 8000952:	d100      	bne.n	8000956 <memset+0xa>
 8000954:	4770      	bx	lr
 8000956:	f803 1b01 	strb.w	r1, [r3], #1
 800095a:	e7f9      	b.n	8000950 <memset+0x4>

0800095c <_puts_r>:
 800095c:	b570      	push	{r4, r5, r6, lr}
 800095e:	460e      	mov	r6, r1
 8000960:	4605      	mov	r5, r0
 8000962:	b118      	cbz	r0, 800096c <_puts_r+0x10>
 8000964:	6983      	ldr	r3, [r0, #24]
 8000966:	b90b      	cbnz	r3, 800096c <_puts_r+0x10>
 8000968:	f000 fa0c 	bl	8000d84 <__sinit>
 800096c:	69ab      	ldr	r3, [r5, #24]
 800096e:	68ac      	ldr	r4, [r5, #8]
 8000970:	b913      	cbnz	r3, 8000978 <_puts_r+0x1c>
 8000972:	4628      	mov	r0, r5
 8000974:	f000 fa06 	bl	8000d84 <__sinit>
 8000978:	4b23      	ldr	r3, [pc, #140]	; (8000a08 <_puts_r+0xac>)
 800097a:	429c      	cmp	r4, r3
 800097c:	d117      	bne.n	80009ae <_puts_r+0x52>
 800097e:	686c      	ldr	r4, [r5, #4]
 8000980:	89a3      	ldrh	r3, [r4, #12]
 8000982:	071b      	lsls	r3, r3, #28
 8000984:	d51d      	bpl.n	80009c2 <_puts_r+0x66>
 8000986:	6923      	ldr	r3, [r4, #16]
 8000988:	b1db      	cbz	r3, 80009c2 <_puts_r+0x66>
 800098a:	3e01      	subs	r6, #1
 800098c:	68a3      	ldr	r3, [r4, #8]
 800098e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000992:	3b01      	subs	r3, #1
 8000994:	60a3      	str	r3, [r4, #8]
 8000996:	b9e9      	cbnz	r1, 80009d4 <_puts_r+0x78>
 8000998:	2b00      	cmp	r3, #0
 800099a:	da2e      	bge.n	80009fa <_puts_r+0x9e>
 800099c:	4622      	mov	r2, r4
 800099e:	210a      	movs	r1, #10
 80009a0:	4628      	mov	r0, r5
 80009a2:	f000 f83f 	bl	8000a24 <__swbuf_r>
 80009a6:	3001      	adds	r0, #1
 80009a8:	d011      	beq.n	80009ce <_puts_r+0x72>
 80009aa:	200a      	movs	r0, #10
 80009ac:	e011      	b.n	80009d2 <_puts_r+0x76>
 80009ae:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <_puts_r+0xb0>)
 80009b0:	429c      	cmp	r4, r3
 80009b2:	d101      	bne.n	80009b8 <_puts_r+0x5c>
 80009b4:	68ac      	ldr	r4, [r5, #8]
 80009b6:	e7e3      	b.n	8000980 <_puts_r+0x24>
 80009b8:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <_puts_r+0xb4>)
 80009ba:	429c      	cmp	r4, r3
 80009bc:	bf08      	it	eq
 80009be:	68ec      	ldreq	r4, [r5, #12]
 80009c0:	e7de      	b.n	8000980 <_puts_r+0x24>
 80009c2:	4621      	mov	r1, r4
 80009c4:	4628      	mov	r0, r5
 80009c6:	f000 f87f 	bl	8000ac8 <__swsetup_r>
 80009ca:	2800      	cmp	r0, #0
 80009cc:	d0dd      	beq.n	800098a <_puts_r+0x2e>
 80009ce:	f04f 30ff 	mov.w	r0, #4294967295
 80009d2:	bd70      	pop	{r4, r5, r6, pc}
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	da04      	bge.n	80009e2 <_puts_r+0x86>
 80009d8:	69a2      	ldr	r2, [r4, #24]
 80009da:	429a      	cmp	r2, r3
 80009dc:	dc06      	bgt.n	80009ec <_puts_r+0x90>
 80009de:	290a      	cmp	r1, #10
 80009e0:	d004      	beq.n	80009ec <_puts_r+0x90>
 80009e2:	6823      	ldr	r3, [r4, #0]
 80009e4:	1c5a      	adds	r2, r3, #1
 80009e6:	6022      	str	r2, [r4, #0]
 80009e8:	7019      	strb	r1, [r3, #0]
 80009ea:	e7cf      	b.n	800098c <_puts_r+0x30>
 80009ec:	4622      	mov	r2, r4
 80009ee:	4628      	mov	r0, r5
 80009f0:	f000 f818 	bl	8000a24 <__swbuf_r>
 80009f4:	3001      	adds	r0, #1
 80009f6:	d1c9      	bne.n	800098c <_puts_r+0x30>
 80009f8:	e7e9      	b.n	80009ce <_puts_r+0x72>
 80009fa:	6823      	ldr	r3, [r4, #0]
 80009fc:	200a      	movs	r0, #10
 80009fe:	1c5a      	adds	r2, r3, #1
 8000a00:	6022      	str	r2, [r4, #0]
 8000a02:	7018      	strb	r0, [r3, #0]
 8000a04:	e7e5      	b.n	80009d2 <_puts_r+0x76>
 8000a06:	bf00      	nop
 8000a08:	080012b0 	.word	0x080012b0
 8000a0c:	080012d0 	.word	0x080012d0
 8000a10:	08001290 	.word	0x08001290

08000a14 <puts>:
 8000a14:	4b02      	ldr	r3, [pc, #8]	; (8000a20 <puts+0xc>)
 8000a16:	4601      	mov	r1, r0
 8000a18:	6818      	ldr	r0, [r3, #0]
 8000a1a:	f7ff bf9f 	b.w	800095c <_puts_r>
 8000a1e:	bf00      	nop
 8000a20:	20000004 	.word	0x20000004

08000a24 <__swbuf_r>:
 8000a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a26:	460e      	mov	r6, r1
 8000a28:	4614      	mov	r4, r2
 8000a2a:	4605      	mov	r5, r0
 8000a2c:	b118      	cbz	r0, 8000a36 <__swbuf_r+0x12>
 8000a2e:	6983      	ldr	r3, [r0, #24]
 8000a30:	b90b      	cbnz	r3, 8000a36 <__swbuf_r+0x12>
 8000a32:	f000 f9a7 	bl	8000d84 <__sinit>
 8000a36:	4b21      	ldr	r3, [pc, #132]	; (8000abc <__swbuf_r+0x98>)
 8000a38:	429c      	cmp	r4, r3
 8000a3a:	d12a      	bne.n	8000a92 <__swbuf_r+0x6e>
 8000a3c:	686c      	ldr	r4, [r5, #4]
 8000a3e:	69a3      	ldr	r3, [r4, #24]
 8000a40:	60a3      	str	r3, [r4, #8]
 8000a42:	89a3      	ldrh	r3, [r4, #12]
 8000a44:	071a      	lsls	r2, r3, #28
 8000a46:	d52e      	bpl.n	8000aa6 <__swbuf_r+0x82>
 8000a48:	6923      	ldr	r3, [r4, #16]
 8000a4a:	b363      	cbz	r3, 8000aa6 <__swbuf_r+0x82>
 8000a4c:	6923      	ldr	r3, [r4, #16]
 8000a4e:	6820      	ldr	r0, [r4, #0]
 8000a50:	1ac0      	subs	r0, r0, r3
 8000a52:	6963      	ldr	r3, [r4, #20]
 8000a54:	b2f6      	uxtb	r6, r6
 8000a56:	4283      	cmp	r3, r0
 8000a58:	4637      	mov	r7, r6
 8000a5a:	dc04      	bgt.n	8000a66 <__swbuf_r+0x42>
 8000a5c:	4621      	mov	r1, r4
 8000a5e:	4628      	mov	r0, r5
 8000a60:	f000 f926 	bl	8000cb0 <_fflush_r>
 8000a64:	bb28      	cbnz	r0, 8000ab2 <__swbuf_r+0x8e>
 8000a66:	68a3      	ldr	r3, [r4, #8]
 8000a68:	3b01      	subs	r3, #1
 8000a6a:	60a3      	str	r3, [r4, #8]
 8000a6c:	6823      	ldr	r3, [r4, #0]
 8000a6e:	1c5a      	adds	r2, r3, #1
 8000a70:	6022      	str	r2, [r4, #0]
 8000a72:	701e      	strb	r6, [r3, #0]
 8000a74:	6963      	ldr	r3, [r4, #20]
 8000a76:	3001      	adds	r0, #1
 8000a78:	4283      	cmp	r3, r0
 8000a7a:	d004      	beq.n	8000a86 <__swbuf_r+0x62>
 8000a7c:	89a3      	ldrh	r3, [r4, #12]
 8000a7e:	07db      	lsls	r3, r3, #31
 8000a80:	d519      	bpl.n	8000ab6 <__swbuf_r+0x92>
 8000a82:	2e0a      	cmp	r6, #10
 8000a84:	d117      	bne.n	8000ab6 <__swbuf_r+0x92>
 8000a86:	4621      	mov	r1, r4
 8000a88:	4628      	mov	r0, r5
 8000a8a:	f000 f911 	bl	8000cb0 <_fflush_r>
 8000a8e:	b190      	cbz	r0, 8000ab6 <__swbuf_r+0x92>
 8000a90:	e00f      	b.n	8000ab2 <__swbuf_r+0x8e>
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <__swbuf_r+0x9c>)
 8000a94:	429c      	cmp	r4, r3
 8000a96:	d101      	bne.n	8000a9c <__swbuf_r+0x78>
 8000a98:	68ac      	ldr	r4, [r5, #8]
 8000a9a:	e7d0      	b.n	8000a3e <__swbuf_r+0x1a>
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <__swbuf_r+0xa0>)
 8000a9e:	429c      	cmp	r4, r3
 8000aa0:	bf08      	it	eq
 8000aa2:	68ec      	ldreq	r4, [r5, #12]
 8000aa4:	e7cb      	b.n	8000a3e <__swbuf_r+0x1a>
 8000aa6:	4621      	mov	r1, r4
 8000aa8:	4628      	mov	r0, r5
 8000aaa:	f000 f80d 	bl	8000ac8 <__swsetup_r>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	d0cc      	beq.n	8000a4c <__swbuf_r+0x28>
 8000ab2:	f04f 37ff 	mov.w	r7, #4294967295
 8000ab6:	4638      	mov	r0, r7
 8000ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000aba:	bf00      	nop
 8000abc:	080012b0 	.word	0x080012b0
 8000ac0:	080012d0 	.word	0x080012d0
 8000ac4:	08001290 	.word	0x08001290

08000ac8 <__swsetup_r>:
 8000ac8:	4b32      	ldr	r3, [pc, #200]	; (8000b94 <__swsetup_r+0xcc>)
 8000aca:	b570      	push	{r4, r5, r6, lr}
 8000acc:	681d      	ldr	r5, [r3, #0]
 8000ace:	4606      	mov	r6, r0
 8000ad0:	460c      	mov	r4, r1
 8000ad2:	b125      	cbz	r5, 8000ade <__swsetup_r+0x16>
 8000ad4:	69ab      	ldr	r3, [r5, #24]
 8000ad6:	b913      	cbnz	r3, 8000ade <__swsetup_r+0x16>
 8000ad8:	4628      	mov	r0, r5
 8000ada:	f000 f953 	bl	8000d84 <__sinit>
 8000ade:	4b2e      	ldr	r3, [pc, #184]	; (8000b98 <__swsetup_r+0xd0>)
 8000ae0:	429c      	cmp	r4, r3
 8000ae2:	d10f      	bne.n	8000b04 <__swsetup_r+0x3c>
 8000ae4:	686c      	ldr	r4, [r5, #4]
 8000ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	0715      	lsls	r5, r2, #28
 8000aee:	d42c      	bmi.n	8000b4a <__swsetup_r+0x82>
 8000af0:	06d0      	lsls	r0, r2, #27
 8000af2:	d411      	bmi.n	8000b18 <__swsetup_r+0x50>
 8000af4:	2209      	movs	r2, #9
 8000af6:	6032      	str	r2, [r6, #0]
 8000af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000afc:	81a3      	strh	r3, [r4, #12]
 8000afe:	f04f 30ff 	mov.w	r0, #4294967295
 8000b02:	e03e      	b.n	8000b82 <__swsetup_r+0xba>
 8000b04:	4b25      	ldr	r3, [pc, #148]	; (8000b9c <__swsetup_r+0xd4>)
 8000b06:	429c      	cmp	r4, r3
 8000b08:	d101      	bne.n	8000b0e <__swsetup_r+0x46>
 8000b0a:	68ac      	ldr	r4, [r5, #8]
 8000b0c:	e7eb      	b.n	8000ae6 <__swsetup_r+0x1e>
 8000b0e:	4b24      	ldr	r3, [pc, #144]	; (8000ba0 <__swsetup_r+0xd8>)
 8000b10:	429c      	cmp	r4, r3
 8000b12:	bf08      	it	eq
 8000b14:	68ec      	ldreq	r4, [r5, #12]
 8000b16:	e7e6      	b.n	8000ae6 <__swsetup_r+0x1e>
 8000b18:	0751      	lsls	r1, r2, #29
 8000b1a:	d512      	bpl.n	8000b42 <__swsetup_r+0x7a>
 8000b1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b1e:	b141      	cbz	r1, 8000b32 <__swsetup_r+0x6a>
 8000b20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b24:	4299      	cmp	r1, r3
 8000b26:	d002      	beq.n	8000b2e <__swsetup_r+0x66>
 8000b28:	4630      	mov	r0, r6
 8000b2a:	f000 fa19 	bl	8000f60 <_free_r>
 8000b2e:	2300      	movs	r3, #0
 8000b30:	6363      	str	r3, [r4, #52]	; 0x34
 8000b32:	89a3      	ldrh	r3, [r4, #12]
 8000b34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000b38:	81a3      	strh	r3, [r4, #12]
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	6063      	str	r3, [r4, #4]
 8000b3e:	6923      	ldr	r3, [r4, #16]
 8000b40:	6023      	str	r3, [r4, #0]
 8000b42:	89a3      	ldrh	r3, [r4, #12]
 8000b44:	f043 0308 	orr.w	r3, r3, #8
 8000b48:	81a3      	strh	r3, [r4, #12]
 8000b4a:	6923      	ldr	r3, [r4, #16]
 8000b4c:	b94b      	cbnz	r3, 8000b62 <__swsetup_r+0x9a>
 8000b4e:	89a3      	ldrh	r3, [r4, #12]
 8000b50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b58:	d003      	beq.n	8000b62 <__swsetup_r+0x9a>
 8000b5a:	4621      	mov	r1, r4
 8000b5c:	4630      	mov	r0, r6
 8000b5e:	f000 f9bf 	bl	8000ee0 <__smakebuf_r>
 8000b62:	89a2      	ldrh	r2, [r4, #12]
 8000b64:	f012 0301 	ands.w	r3, r2, #1
 8000b68:	d00c      	beq.n	8000b84 <__swsetup_r+0xbc>
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60a3      	str	r3, [r4, #8]
 8000b6e:	6963      	ldr	r3, [r4, #20]
 8000b70:	425b      	negs	r3, r3
 8000b72:	61a3      	str	r3, [r4, #24]
 8000b74:	6923      	ldr	r3, [r4, #16]
 8000b76:	b953      	cbnz	r3, 8000b8e <__swsetup_r+0xc6>
 8000b78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b7c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8000b80:	d1ba      	bne.n	8000af8 <__swsetup_r+0x30>
 8000b82:	bd70      	pop	{r4, r5, r6, pc}
 8000b84:	0792      	lsls	r2, r2, #30
 8000b86:	bf58      	it	pl
 8000b88:	6963      	ldrpl	r3, [r4, #20]
 8000b8a:	60a3      	str	r3, [r4, #8]
 8000b8c:	e7f2      	b.n	8000b74 <__swsetup_r+0xac>
 8000b8e:	2000      	movs	r0, #0
 8000b90:	e7f7      	b.n	8000b82 <__swsetup_r+0xba>
 8000b92:	bf00      	nop
 8000b94:	20000004 	.word	0x20000004
 8000b98:	080012b0 	.word	0x080012b0
 8000b9c:	080012d0 	.word	0x080012d0
 8000ba0:	08001290 	.word	0x08001290

08000ba4 <__sflush_r>:
 8000ba4:	898a      	ldrh	r2, [r1, #12]
 8000ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000baa:	4605      	mov	r5, r0
 8000bac:	0710      	lsls	r0, r2, #28
 8000bae:	460c      	mov	r4, r1
 8000bb0:	d458      	bmi.n	8000c64 <__sflush_r+0xc0>
 8000bb2:	684b      	ldr	r3, [r1, #4]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	dc05      	bgt.n	8000bc4 <__sflush_r+0x20>
 8000bb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	dc02      	bgt.n	8000bc4 <__sflush_r+0x20>
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000bc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	d0f9      	beq.n	8000bbe <__sflush_r+0x1a>
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000bd0:	682f      	ldr	r7, [r5, #0]
 8000bd2:	6a21      	ldr	r1, [r4, #32]
 8000bd4:	602b      	str	r3, [r5, #0]
 8000bd6:	d032      	beq.n	8000c3e <__sflush_r+0x9a>
 8000bd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000bda:	89a3      	ldrh	r3, [r4, #12]
 8000bdc:	075a      	lsls	r2, r3, #29
 8000bde:	d505      	bpl.n	8000bec <__sflush_r+0x48>
 8000be0:	6863      	ldr	r3, [r4, #4]
 8000be2:	1ac0      	subs	r0, r0, r3
 8000be4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000be6:	b10b      	cbz	r3, 8000bec <__sflush_r+0x48>
 8000be8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bea:	1ac0      	subs	r0, r0, r3
 8000bec:	2300      	movs	r3, #0
 8000bee:	4602      	mov	r2, r0
 8000bf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000bf2:	6a21      	ldr	r1, [r4, #32]
 8000bf4:	4628      	mov	r0, r5
 8000bf6:	47b0      	blx	r6
 8000bf8:	1c43      	adds	r3, r0, #1
 8000bfa:	89a3      	ldrh	r3, [r4, #12]
 8000bfc:	d106      	bne.n	8000c0c <__sflush_r+0x68>
 8000bfe:	6829      	ldr	r1, [r5, #0]
 8000c00:	291d      	cmp	r1, #29
 8000c02:	d848      	bhi.n	8000c96 <__sflush_r+0xf2>
 8000c04:	4a29      	ldr	r2, [pc, #164]	; (8000cac <__sflush_r+0x108>)
 8000c06:	40ca      	lsrs	r2, r1
 8000c08:	07d6      	lsls	r6, r2, #31
 8000c0a:	d544      	bpl.n	8000c96 <__sflush_r+0xf2>
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	6062      	str	r2, [r4, #4]
 8000c10:	04d9      	lsls	r1, r3, #19
 8000c12:	6922      	ldr	r2, [r4, #16]
 8000c14:	6022      	str	r2, [r4, #0]
 8000c16:	d504      	bpl.n	8000c22 <__sflush_r+0x7e>
 8000c18:	1c42      	adds	r2, r0, #1
 8000c1a:	d101      	bne.n	8000c20 <__sflush_r+0x7c>
 8000c1c:	682b      	ldr	r3, [r5, #0]
 8000c1e:	b903      	cbnz	r3, 8000c22 <__sflush_r+0x7e>
 8000c20:	6560      	str	r0, [r4, #84]	; 0x54
 8000c22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000c24:	602f      	str	r7, [r5, #0]
 8000c26:	2900      	cmp	r1, #0
 8000c28:	d0c9      	beq.n	8000bbe <__sflush_r+0x1a>
 8000c2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	d002      	beq.n	8000c38 <__sflush_r+0x94>
 8000c32:	4628      	mov	r0, r5
 8000c34:	f000 f994 	bl	8000f60 <_free_r>
 8000c38:	2000      	movs	r0, #0
 8000c3a:	6360      	str	r0, [r4, #52]	; 0x34
 8000c3c:	e7c0      	b.n	8000bc0 <__sflush_r+0x1c>
 8000c3e:	2301      	movs	r3, #1
 8000c40:	4628      	mov	r0, r5
 8000c42:	47b0      	blx	r6
 8000c44:	1c41      	adds	r1, r0, #1
 8000c46:	d1c8      	bne.n	8000bda <__sflush_r+0x36>
 8000c48:	682b      	ldr	r3, [r5, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d0c5      	beq.n	8000bda <__sflush_r+0x36>
 8000c4e:	2b1d      	cmp	r3, #29
 8000c50:	d001      	beq.n	8000c56 <__sflush_r+0xb2>
 8000c52:	2b16      	cmp	r3, #22
 8000c54:	d101      	bne.n	8000c5a <__sflush_r+0xb6>
 8000c56:	602f      	str	r7, [r5, #0]
 8000c58:	e7b1      	b.n	8000bbe <__sflush_r+0x1a>
 8000c5a:	89a3      	ldrh	r3, [r4, #12]
 8000c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c60:	81a3      	strh	r3, [r4, #12]
 8000c62:	e7ad      	b.n	8000bc0 <__sflush_r+0x1c>
 8000c64:	690f      	ldr	r7, [r1, #16]
 8000c66:	2f00      	cmp	r7, #0
 8000c68:	d0a9      	beq.n	8000bbe <__sflush_r+0x1a>
 8000c6a:	0793      	lsls	r3, r2, #30
 8000c6c:	680e      	ldr	r6, [r1, #0]
 8000c6e:	bf08      	it	eq
 8000c70:	694b      	ldreq	r3, [r1, #20]
 8000c72:	600f      	str	r7, [r1, #0]
 8000c74:	bf18      	it	ne
 8000c76:	2300      	movne	r3, #0
 8000c78:	eba6 0807 	sub.w	r8, r6, r7
 8000c7c:	608b      	str	r3, [r1, #8]
 8000c7e:	f1b8 0f00 	cmp.w	r8, #0
 8000c82:	dd9c      	ble.n	8000bbe <__sflush_r+0x1a>
 8000c84:	4643      	mov	r3, r8
 8000c86:	463a      	mov	r2, r7
 8000c88:	6a21      	ldr	r1, [r4, #32]
 8000c8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000c8c:	4628      	mov	r0, r5
 8000c8e:	47b0      	blx	r6
 8000c90:	2800      	cmp	r0, #0
 8000c92:	dc06      	bgt.n	8000ca2 <__sflush_r+0xfe>
 8000c94:	89a3      	ldrh	r3, [r4, #12]
 8000c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c9a:	81a3      	strh	r3, [r4, #12]
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca0:	e78e      	b.n	8000bc0 <__sflush_r+0x1c>
 8000ca2:	4407      	add	r7, r0
 8000ca4:	eba8 0800 	sub.w	r8, r8, r0
 8000ca8:	e7e9      	b.n	8000c7e <__sflush_r+0xda>
 8000caa:	bf00      	nop
 8000cac:	20400001 	.word	0x20400001

08000cb0 <_fflush_r>:
 8000cb0:	b538      	push	{r3, r4, r5, lr}
 8000cb2:	690b      	ldr	r3, [r1, #16]
 8000cb4:	4605      	mov	r5, r0
 8000cb6:	460c      	mov	r4, r1
 8000cb8:	b1db      	cbz	r3, 8000cf2 <_fflush_r+0x42>
 8000cba:	b118      	cbz	r0, 8000cc4 <_fflush_r+0x14>
 8000cbc:	6983      	ldr	r3, [r0, #24]
 8000cbe:	b90b      	cbnz	r3, 8000cc4 <_fflush_r+0x14>
 8000cc0:	f000 f860 	bl	8000d84 <__sinit>
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <_fflush_r+0x48>)
 8000cc6:	429c      	cmp	r4, r3
 8000cc8:	d109      	bne.n	8000cde <_fflush_r+0x2e>
 8000cca:	686c      	ldr	r4, [r5, #4]
 8000ccc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cd0:	b17b      	cbz	r3, 8000cf2 <_fflush_r+0x42>
 8000cd2:	4621      	mov	r1, r4
 8000cd4:	4628      	mov	r0, r5
 8000cd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cda:	f7ff bf63 	b.w	8000ba4 <__sflush_r>
 8000cde:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <_fflush_r+0x4c>)
 8000ce0:	429c      	cmp	r4, r3
 8000ce2:	d101      	bne.n	8000ce8 <_fflush_r+0x38>
 8000ce4:	68ac      	ldr	r4, [r5, #8]
 8000ce6:	e7f1      	b.n	8000ccc <_fflush_r+0x1c>
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <_fflush_r+0x50>)
 8000cea:	429c      	cmp	r4, r3
 8000cec:	bf08      	it	eq
 8000cee:	68ec      	ldreq	r4, [r5, #12]
 8000cf0:	e7ec      	b.n	8000ccc <_fflush_r+0x1c>
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop
 8000cf8:	080012b0 	.word	0x080012b0
 8000cfc:	080012d0 	.word	0x080012d0
 8000d00:	08001290 	.word	0x08001290

08000d04 <std>:
 8000d04:	2300      	movs	r3, #0
 8000d06:	b510      	push	{r4, lr}
 8000d08:	4604      	mov	r4, r0
 8000d0a:	e9c0 3300 	strd	r3, r3, [r0]
 8000d0e:	6083      	str	r3, [r0, #8]
 8000d10:	8181      	strh	r1, [r0, #12]
 8000d12:	6643      	str	r3, [r0, #100]	; 0x64
 8000d14:	81c2      	strh	r2, [r0, #14]
 8000d16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000d1a:	6183      	str	r3, [r0, #24]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	2208      	movs	r2, #8
 8000d20:	305c      	adds	r0, #92	; 0x5c
 8000d22:	f7ff fe13 	bl	800094c <memset>
 8000d26:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <std+0x38>)
 8000d28:	6263      	str	r3, [r4, #36]	; 0x24
 8000d2a:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <std+0x3c>)
 8000d2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8000d2e:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <std+0x40>)
 8000d30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000d32:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <std+0x44>)
 8000d34:	6224      	str	r4, [r4, #32]
 8000d36:	6323      	str	r3, [r4, #48]	; 0x30
 8000d38:	bd10      	pop	{r4, pc}
 8000d3a:	bf00      	nop
 8000d3c:	080010d1 	.word	0x080010d1
 8000d40:	080010f3 	.word	0x080010f3
 8000d44:	0800112b 	.word	0x0800112b
 8000d48:	0800114f 	.word	0x0800114f

08000d4c <_cleanup_r>:
 8000d4c:	4901      	ldr	r1, [pc, #4]	; (8000d54 <_cleanup_r+0x8>)
 8000d4e:	f000 b885 	b.w	8000e5c <_fwalk_reent>
 8000d52:	bf00      	nop
 8000d54:	08000cb1 	.word	0x08000cb1

08000d58 <__sfmoreglue>:
 8000d58:	b570      	push	{r4, r5, r6, lr}
 8000d5a:	1e4a      	subs	r2, r1, #1
 8000d5c:	2568      	movs	r5, #104	; 0x68
 8000d5e:	4355      	muls	r5, r2
 8000d60:	460e      	mov	r6, r1
 8000d62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000d66:	f000 f949 	bl	8000ffc <_malloc_r>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	b140      	cbz	r0, 8000d80 <__sfmoreglue+0x28>
 8000d6e:	2100      	movs	r1, #0
 8000d70:	e9c0 1600 	strd	r1, r6, [r0]
 8000d74:	300c      	adds	r0, #12
 8000d76:	60a0      	str	r0, [r4, #8]
 8000d78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000d7c:	f7ff fde6 	bl	800094c <memset>
 8000d80:	4620      	mov	r0, r4
 8000d82:	bd70      	pop	{r4, r5, r6, pc}

08000d84 <__sinit>:
 8000d84:	6983      	ldr	r3, [r0, #24]
 8000d86:	b510      	push	{r4, lr}
 8000d88:	4604      	mov	r4, r0
 8000d8a:	bb33      	cbnz	r3, 8000dda <__sinit+0x56>
 8000d8c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8000d90:	6503      	str	r3, [r0, #80]	; 0x50
 8000d92:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <__sinit+0x58>)
 8000d94:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <__sinit+0x5c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	6282      	str	r2, [r0, #40]	; 0x28
 8000d9a:	4298      	cmp	r0, r3
 8000d9c:	bf04      	itt	eq
 8000d9e:	2301      	moveq	r3, #1
 8000da0:	6183      	streq	r3, [r0, #24]
 8000da2:	f000 f81f 	bl	8000de4 <__sfp>
 8000da6:	6060      	str	r0, [r4, #4]
 8000da8:	4620      	mov	r0, r4
 8000daa:	f000 f81b 	bl	8000de4 <__sfp>
 8000dae:	60a0      	str	r0, [r4, #8]
 8000db0:	4620      	mov	r0, r4
 8000db2:	f000 f817 	bl	8000de4 <__sfp>
 8000db6:	2200      	movs	r2, #0
 8000db8:	60e0      	str	r0, [r4, #12]
 8000dba:	2104      	movs	r1, #4
 8000dbc:	6860      	ldr	r0, [r4, #4]
 8000dbe:	f7ff ffa1 	bl	8000d04 <std>
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2109      	movs	r1, #9
 8000dc6:	68a0      	ldr	r0, [r4, #8]
 8000dc8:	f7ff ff9c 	bl	8000d04 <std>
 8000dcc:	2202      	movs	r2, #2
 8000dce:	2112      	movs	r1, #18
 8000dd0:	68e0      	ldr	r0, [r4, #12]
 8000dd2:	f7ff ff97 	bl	8000d04 <std>
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	61a3      	str	r3, [r4, #24]
 8000dda:	bd10      	pop	{r4, pc}
 8000ddc:	0800128c 	.word	0x0800128c
 8000de0:	08000d4d 	.word	0x08000d4d

08000de4 <__sfp>:
 8000de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000de6:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <__sfp+0x70>)
 8000de8:	681e      	ldr	r6, [r3, #0]
 8000dea:	69b3      	ldr	r3, [r6, #24]
 8000dec:	4607      	mov	r7, r0
 8000dee:	b913      	cbnz	r3, 8000df6 <__sfp+0x12>
 8000df0:	4630      	mov	r0, r6
 8000df2:	f7ff ffc7 	bl	8000d84 <__sinit>
 8000df6:	3648      	adds	r6, #72	; 0x48
 8000df8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	d503      	bpl.n	8000e08 <__sfp+0x24>
 8000e00:	6833      	ldr	r3, [r6, #0]
 8000e02:	b133      	cbz	r3, 8000e12 <__sfp+0x2e>
 8000e04:	6836      	ldr	r6, [r6, #0]
 8000e06:	e7f7      	b.n	8000df8 <__sfp+0x14>
 8000e08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000e0c:	b16d      	cbz	r5, 8000e2a <__sfp+0x46>
 8000e0e:	3468      	adds	r4, #104	; 0x68
 8000e10:	e7f4      	b.n	8000dfc <__sfp+0x18>
 8000e12:	2104      	movs	r1, #4
 8000e14:	4638      	mov	r0, r7
 8000e16:	f7ff ff9f 	bl	8000d58 <__sfmoreglue>
 8000e1a:	6030      	str	r0, [r6, #0]
 8000e1c:	2800      	cmp	r0, #0
 8000e1e:	d1f1      	bne.n	8000e04 <__sfp+0x20>
 8000e20:	230c      	movs	r3, #12
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	4604      	mov	r4, r0
 8000e26:	4620      	mov	r0, r4
 8000e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <__sfp+0x74>)
 8000e2c:	6665      	str	r5, [r4, #100]	; 0x64
 8000e2e:	e9c4 5500 	strd	r5, r5, [r4]
 8000e32:	60a5      	str	r5, [r4, #8]
 8000e34:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8000e38:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8000e3c:	2208      	movs	r2, #8
 8000e3e:	4629      	mov	r1, r5
 8000e40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000e44:	f7ff fd82 	bl	800094c <memset>
 8000e48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000e4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000e50:	e7e9      	b.n	8000e26 <__sfp+0x42>
 8000e52:	bf00      	nop
 8000e54:	0800128c 	.word	0x0800128c
 8000e58:	ffff0001 	.word	0xffff0001

08000e5c <_fwalk_reent>:
 8000e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e60:	4680      	mov	r8, r0
 8000e62:	4689      	mov	r9, r1
 8000e64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000e68:	2600      	movs	r6, #0
 8000e6a:	b914      	cbnz	r4, 8000e72 <_fwalk_reent+0x16>
 8000e6c:	4630      	mov	r0, r6
 8000e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e72:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8000e76:	3f01      	subs	r7, #1
 8000e78:	d501      	bpl.n	8000e7e <_fwalk_reent+0x22>
 8000e7a:	6824      	ldr	r4, [r4, #0]
 8000e7c:	e7f5      	b.n	8000e6a <_fwalk_reent+0xe>
 8000e7e:	89ab      	ldrh	r3, [r5, #12]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d907      	bls.n	8000e94 <_fwalk_reent+0x38>
 8000e84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	d003      	beq.n	8000e94 <_fwalk_reent+0x38>
 8000e8c:	4629      	mov	r1, r5
 8000e8e:	4640      	mov	r0, r8
 8000e90:	47c8      	blx	r9
 8000e92:	4306      	orrs	r6, r0
 8000e94:	3568      	adds	r5, #104	; 0x68
 8000e96:	e7ee      	b.n	8000e76 <_fwalk_reent+0x1a>

08000e98 <__swhatbuf_r>:
 8000e98:	b570      	push	{r4, r5, r6, lr}
 8000e9a:	460e      	mov	r6, r1
 8000e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ea0:	2900      	cmp	r1, #0
 8000ea2:	b096      	sub	sp, #88	; 0x58
 8000ea4:	4614      	mov	r4, r2
 8000ea6:	461d      	mov	r5, r3
 8000ea8:	da07      	bge.n	8000eba <__swhatbuf_r+0x22>
 8000eaa:	2300      	movs	r3, #0
 8000eac:	602b      	str	r3, [r5, #0]
 8000eae:	89b3      	ldrh	r3, [r6, #12]
 8000eb0:	061a      	lsls	r2, r3, #24
 8000eb2:	d410      	bmi.n	8000ed6 <__swhatbuf_r+0x3e>
 8000eb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eb8:	e00e      	b.n	8000ed8 <__swhatbuf_r+0x40>
 8000eba:	466a      	mov	r2, sp
 8000ebc:	f000 f96e 	bl	800119c <_fstat_r>
 8000ec0:	2800      	cmp	r0, #0
 8000ec2:	dbf2      	blt.n	8000eaa <__swhatbuf_r+0x12>
 8000ec4:	9a01      	ldr	r2, [sp, #4]
 8000ec6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000eca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000ece:	425a      	negs	r2, r3
 8000ed0:	415a      	adcs	r2, r3
 8000ed2:	602a      	str	r2, [r5, #0]
 8000ed4:	e7ee      	b.n	8000eb4 <__swhatbuf_r+0x1c>
 8000ed6:	2340      	movs	r3, #64	; 0x40
 8000ed8:	2000      	movs	r0, #0
 8000eda:	6023      	str	r3, [r4, #0]
 8000edc:	b016      	add	sp, #88	; 0x58
 8000ede:	bd70      	pop	{r4, r5, r6, pc}

08000ee0 <__smakebuf_r>:
 8000ee0:	898b      	ldrh	r3, [r1, #12]
 8000ee2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000ee4:	079d      	lsls	r5, r3, #30
 8000ee6:	4606      	mov	r6, r0
 8000ee8:	460c      	mov	r4, r1
 8000eea:	d507      	bpl.n	8000efc <__smakebuf_r+0x1c>
 8000eec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000ef0:	6023      	str	r3, [r4, #0]
 8000ef2:	6123      	str	r3, [r4, #16]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	6163      	str	r3, [r4, #20]
 8000ef8:	b002      	add	sp, #8
 8000efa:	bd70      	pop	{r4, r5, r6, pc}
 8000efc:	ab01      	add	r3, sp, #4
 8000efe:	466a      	mov	r2, sp
 8000f00:	f7ff ffca 	bl	8000e98 <__swhatbuf_r>
 8000f04:	9900      	ldr	r1, [sp, #0]
 8000f06:	4605      	mov	r5, r0
 8000f08:	4630      	mov	r0, r6
 8000f0a:	f000 f877 	bl	8000ffc <_malloc_r>
 8000f0e:	b948      	cbnz	r0, 8000f24 <__smakebuf_r+0x44>
 8000f10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f14:	059a      	lsls	r2, r3, #22
 8000f16:	d4ef      	bmi.n	8000ef8 <__smakebuf_r+0x18>
 8000f18:	f023 0303 	bic.w	r3, r3, #3
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	81a3      	strh	r3, [r4, #12]
 8000f22:	e7e3      	b.n	8000eec <__smakebuf_r+0xc>
 8000f24:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <__smakebuf_r+0x7c>)
 8000f26:	62b3      	str	r3, [r6, #40]	; 0x28
 8000f28:	89a3      	ldrh	r3, [r4, #12]
 8000f2a:	6020      	str	r0, [r4, #0]
 8000f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f30:	81a3      	strh	r3, [r4, #12]
 8000f32:	9b00      	ldr	r3, [sp, #0]
 8000f34:	6163      	str	r3, [r4, #20]
 8000f36:	9b01      	ldr	r3, [sp, #4]
 8000f38:	6120      	str	r0, [r4, #16]
 8000f3a:	b15b      	cbz	r3, 8000f54 <__smakebuf_r+0x74>
 8000f3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f40:	4630      	mov	r0, r6
 8000f42:	f000 f93d 	bl	80011c0 <_isatty_r>
 8000f46:	b128      	cbz	r0, 8000f54 <__smakebuf_r+0x74>
 8000f48:	89a3      	ldrh	r3, [r4, #12]
 8000f4a:	f023 0303 	bic.w	r3, r3, #3
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	81a3      	strh	r3, [r4, #12]
 8000f54:	89a3      	ldrh	r3, [r4, #12]
 8000f56:	431d      	orrs	r5, r3
 8000f58:	81a5      	strh	r5, [r4, #12]
 8000f5a:	e7cd      	b.n	8000ef8 <__smakebuf_r+0x18>
 8000f5c:	08000d4d 	.word	0x08000d4d

08000f60 <_free_r>:
 8000f60:	b538      	push	{r3, r4, r5, lr}
 8000f62:	4605      	mov	r5, r0
 8000f64:	2900      	cmp	r1, #0
 8000f66:	d045      	beq.n	8000ff4 <_free_r+0x94>
 8000f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f6c:	1f0c      	subs	r4, r1, #4
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	bfb8      	it	lt
 8000f72:	18e4      	addlt	r4, r4, r3
 8000f74:	f000 f946 	bl	8001204 <__malloc_lock>
 8000f78:	4a1f      	ldr	r2, [pc, #124]	; (8000ff8 <_free_r+0x98>)
 8000f7a:	6813      	ldr	r3, [r2, #0]
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	b933      	cbnz	r3, 8000f8e <_free_r+0x2e>
 8000f80:	6063      	str	r3, [r4, #4]
 8000f82:	6014      	str	r4, [r2, #0]
 8000f84:	4628      	mov	r0, r5
 8000f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f8a:	f000 b93c 	b.w	8001206 <__malloc_unlock>
 8000f8e:	42a3      	cmp	r3, r4
 8000f90:	d90c      	bls.n	8000fac <_free_r+0x4c>
 8000f92:	6821      	ldr	r1, [r4, #0]
 8000f94:	1862      	adds	r2, r4, r1
 8000f96:	4293      	cmp	r3, r2
 8000f98:	bf04      	itt	eq
 8000f9a:	681a      	ldreq	r2, [r3, #0]
 8000f9c:	685b      	ldreq	r3, [r3, #4]
 8000f9e:	6063      	str	r3, [r4, #4]
 8000fa0:	bf04      	itt	eq
 8000fa2:	1852      	addeq	r2, r2, r1
 8000fa4:	6022      	streq	r2, [r4, #0]
 8000fa6:	6004      	str	r4, [r0, #0]
 8000fa8:	e7ec      	b.n	8000f84 <_free_r+0x24>
 8000faa:	4613      	mov	r3, r2
 8000fac:	685a      	ldr	r2, [r3, #4]
 8000fae:	b10a      	cbz	r2, 8000fb4 <_free_r+0x54>
 8000fb0:	42a2      	cmp	r2, r4
 8000fb2:	d9fa      	bls.n	8000faa <_free_r+0x4a>
 8000fb4:	6819      	ldr	r1, [r3, #0]
 8000fb6:	1858      	adds	r0, r3, r1
 8000fb8:	42a0      	cmp	r0, r4
 8000fba:	d10b      	bne.n	8000fd4 <_free_r+0x74>
 8000fbc:	6820      	ldr	r0, [r4, #0]
 8000fbe:	4401      	add	r1, r0
 8000fc0:	1858      	adds	r0, r3, r1
 8000fc2:	4282      	cmp	r2, r0
 8000fc4:	6019      	str	r1, [r3, #0]
 8000fc6:	d1dd      	bne.n	8000f84 <_free_r+0x24>
 8000fc8:	6810      	ldr	r0, [r2, #0]
 8000fca:	6852      	ldr	r2, [r2, #4]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	4401      	add	r1, r0
 8000fd0:	6019      	str	r1, [r3, #0]
 8000fd2:	e7d7      	b.n	8000f84 <_free_r+0x24>
 8000fd4:	d902      	bls.n	8000fdc <_free_r+0x7c>
 8000fd6:	230c      	movs	r3, #12
 8000fd8:	602b      	str	r3, [r5, #0]
 8000fda:	e7d3      	b.n	8000f84 <_free_r+0x24>
 8000fdc:	6820      	ldr	r0, [r4, #0]
 8000fde:	1821      	adds	r1, r4, r0
 8000fe0:	428a      	cmp	r2, r1
 8000fe2:	bf04      	itt	eq
 8000fe4:	6811      	ldreq	r1, [r2, #0]
 8000fe6:	6852      	ldreq	r2, [r2, #4]
 8000fe8:	6062      	str	r2, [r4, #4]
 8000fea:	bf04      	itt	eq
 8000fec:	1809      	addeq	r1, r1, r0
 8000fee:	6021      	streq	r1, [r4, #0]
 8000ff0:	605c      	str	r4, [r3, #4]
 8000ff2:	e7c7      	b.n	8000f84 <_free_r+0x24>
 8000ff4:	bd38      	pop	{r3, r4, r5, pc}
 8000ff6:	bf00      	nop
 8000ff8:	2000008c 	.word	0x2000008c

08000ffc <_malloc_r>:
 8000ffc:	b570      	push	{r4, r5, r6, lr}
 8000ffe:	1ccd      	adds	r5, r1, #3
 8001000:	f025 0503 	bic.w	r5, r5, #3
 8001004:	3508      	adds	r5, #8
 8001006:	2d0c      	cmp	r5, #12
 8001008:	bf38      	it	cc
 800100a:	250c      	movcc	r5, #12
 800100c:	2d00      	cmp	r5, #0
 800100e:	4606      	mov	r6, r0
 8001010:	db01      	blt.n	8001016 <_malloc_r+0x1a>
 8001012:	42a9      	cmp	r1, r5
 8001014:	d903      	bls.n	800101e <_malloc_r+0x22>
 8001016:	230c      	movs	r3, #12
 8001018:	6033      	str	r3, [r6, #0]
 800101a:	2000      	movs	r0, #0
 800101c:	bd70      	pop	{r4, r5, r6, pc}
 800101e:	f000 f8f1 	bl	8001204 <__malloc_lock>
 8001022:	4a21      	ldr	r2, [pc, #132]	; (80010a8 <_malloc_r+0xac>)
 8001024:	6814      	ldr	r4, [r2, #0]
 8001026:	4621      	mov	r1, r4
 8001028:	b991      	cbnz	r1, 8001050 <_malloc_r+0x54>
 800102a:	4c20      	ldr	r4, [pc, #128]	; (80010ac <_malloc_r+0xb0>)
 800102c:	6823      	ldr	r3, [r4, #0]
 800102e:	b91b      	cbnz	r3, 8001038 <_malloc_r+0x3c>
 8001030:	4630      	mov	r0, r6
 8001032:	f000 f83d 	bl	80010b0 <_sbrk_r>
 8001036:	6020      	str	r0, [r4, #0]
 8001038:	4629      	mov	r1, r5
 800103a:	4630      	mov	r0, r6
 800103c:	f000 f838 	bl	80010b0 <_sbrk_r>
 8001040:	1c43      	adds	r3, r0, #1
 8001042:	d124      	bne.n	800108e <_malloc_r+0x92>
 8001044:	230c      	movs	r3, #12
 8001046:	6033      	str	r3, [r6, #0]
 8001048:	4630      	mov	r0, r6
 800104a:	f000 f8dc 	bl	8001206 <__malloc_unlock>
 800104e:	e7e4      	b.n	800101a <_malloc_r+0x1e>
 8001050:	680b      	ldr	r3, [r1, #0]
 8001052:	1b5b      	subs	r3, r3, r5
 8001054:	d418      	bmi.n	8001088 <_malloc_r+0x8c>
 8001056:	2b0b      	cmp	r3, #11
 8001058:	d90f      	bls.n	800107a <_malloc_r+0x7e>
 800105a:	600b      	str	r3, [r1, #0]
 800105c:	50cd      	str	r5, [r1, r3]
 800105e:	18cc      	adds	r4, r1, r3
 8001060:	4630      	mov	r0, r6
 8001062:	f000 f8d0 	bl	8001206 <__malloc_unlock>
 8001066:	f104 000b 	add.w	r0, r4, #11
 800106a:	1d23      	adds	r3, r4, #4
 800106c:	f020 0007 	bic.w	r0, r0, #7
 8001070:	1ac3      	subs	r3, r0, r3
 8001072:	d0d3      	beq.n	800101c <_malloc_r+0x20>
 8001074:	425a      	negs	r2, r3
 8001076:	50e2      	str	r2, [r4, r3]
 8001078:	e7d0      	b.n	800101c <_malloc_r+0x20>
 800107a:	428c      	cmp	r4, r1
 800107c:	684b      	ldr	r3, [r1, #4]
 800107e:	bf16      	itet	ne
 8001080:	6063      	strne	r3, [r4, #4]
 8001082:	6013      	streq	r3, [r2, #0]
 8001084:	460c      	movne	r4, r1
 8001086:	e7eb      	b.n	8001060 <_malloc_r+0x64>
 8001088:	460c      	mov	r4, r1
 800108a:	6849      	ldr	r1, [r1, #4]
 800108c:	e7cc      	b.n	8001028 <_malloc_r+0x2c>
 800108e:	1cc4      	adds	r4, r0, #3
 8001090:	f024 0403 	bic.w	r4, r4, #3
 8001094:	42a0      	cmp	r0, r4
 8001096:	d005      	beq.n	80010a4 <_malloc_r+0xa8>
 8001098:	1a21      	subs	r1, r4, r0
 800109a:	4630      	mov	r0, r6
 800109c:	f000 f808 	bl	80010b0 <_sbrk_r>
 80010a0:	3001      	adds	r0, #1
 80010a2:	d0cf      	beq.n	8001044 <_malloc_r+0x48>
 80010a4:	6025      	str	r5, [r4, #0]
 80010a6:	e7db      	b.n	8001060 <_malloc_r+0x64>
 80010a8:	2000008c 	.word	0x2000008c
 80010ac:	20000090 	.word	0x20000090

080010b0 <_sbrk_r>:
 80010b0:	b538      	push	{r3, r4, r5, lr}
 80010b2:	4c06      	ldr	r4, [pc, #24]	; (80010cc <_sbrk_r+0x1c>)
 80010b4:	2300      	movs	r3, #0
 80010b6:	4605      	mov	r5, r0
 80010b8:	4608      	mov	r0, r1
 80010ba:	6023      	str	r3, [r4, #0]
 80010bc:	f7ff fbc6 	bl	800084c <_sbrk>
 80010c0:	1c43      	adds	r3, r0, #1
 80010c2:	d102      	bne.n	80010ca <_sbrk_r+0x1a>
 80010c4:	6823      	ldr	r3, [r4, #0]
 80010c6:	b103      	cbz	r3, 80010ca <_sbrk_r+0x1a>
 80010c8:	602b      	str	r3, [r5, #0]
 80010ca:	bd38      	pop	{r3, r4, r5, pc}
 80010cc:	200000e4 	.word	0x200000e4

080010d0 <__sread>:
 80010d0:	b510      	push	{r4, lr}
 80010d2:	460c      	mov	r4, r1
 80010d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010d8:	f000 f896 	bl	8001208 <_read_r>
 80010dc:	2800      	cmp	r0, #0
 80010de:	bfab      	itete	ge
 80010e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80010e2:	89a3      	ldrhlt	r3, [r4, #12]
 80010e4:	181b      	addge	r3, r3, r0
 80010e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80010ea:	bfac      	ite	ge
 80010ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80010ee:	81a3      	strhlt	r3, [r4, #12]
 80010f0:	bd10      	pop	{r4, pc}

080010f2 <__swrite>:
 80010f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010f6:	461f      	mov	r7, r3
 80010f8:	898b      	ldrh	r3, [r1, #12]
 80010fa:	05db      	lsls	r3, r3, #23
 80010fc:	4605      	mov	r5, r0
 80010fe:	460c      	mov	r4, r1
 8001100:	4616      	mov	r6, r2
 8001102:	d505      	bpl.n	8001110 <__swrite+0x1e>
 8001104:	2302      	movs	r3, #2
 8001106:	2200      	movs	r2, #0
 8001108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800110c:	f000 f868 	bl	80011e0 <_lseek_r>
 8001110:	89a3      	ldrh	r3, [r4, #12]
 8001112:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001116:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800111a:	81a3      	strh	r3, [r4, #12]
 800111c:	4632      	mov	r2, r6
 800111e:	463b      	mov	r3, r7
 8001120:	4628      	mov	r0, r5
 8001122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001126:	f000 b817 	b.w	8001158 <_write_r>

0800112a <__sseek>:
 800112a:	b510      	push	{r4, lr}
 800112c:	460c      	mov	r4, r1
 800112e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001132:	f000 f855 	bl	80011e0 <_lseek_r>
 8001136:	1c43      	adds	r3, r0, #1
 8001138:	89a3      	ldrh	r3, [r4, #12]
 800113a:	bf15      	itete	ne
 800113c:	6560      	strne	r0, [r4, #84]	; 0x54
 800113e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001142:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001146:	81a3      	strheq	r3, [r4, #12]
 8001148:	bf18      	it	ne
 800114a:	81a3      	strhne	r3, [r4, #12]
 800114c:	bd10      	pop	{r4, pc}

0800114e <__sclose>:
 800114e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001152:	f000 b813 	b.w	800117c <_close_r>
	...

08001158 <_write_r>:
 8001158:	b538      	push	{r3, r4, r5, lr}
 800115a:	4c07      	ldr	r4, [pc, #28]	; (8001178 <_write_r+0x20>)
 800115c:	4605      	mov	r5, r0
 800115e:	4608      	mov	r0, r1
 8001160:	4611      	mov	r1, r2
 8001162:	2200      	movs	r2, #0
 8001164:	6022      	str	r2, [r4, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	f7ff fb1f 	bl	80007aa <_write>
 800116c:	1c43      	adds	r3, r0, #1
 800116e:	d102      	bne.n	8001176 <_write_r+0x1e>
 8001170:	6823      	ldr	r3, [r4, #0]
 8001172:	b103      	cbz	r3, 8001176 <_write_r+0x1e>
 8001174:	602b      	str	r3, [r5, #0]
 8001176:	bd38      	pop	{r3, r4, r5, pc}
 8001178:	200000e4 	.word	0x200000e4

0800117c <_close_r>:
 800117c:	b538      	push	{r3, r4, r5, lr}
 800117e:	4c06      	ldr	r4, [pc, #24]	; (8001198 <_close_r+0x1c>)
 8001180:	2300      	movs	r3, #0
 8001182:	4605      	mov	r5, r0
 8001184:	4608      	mov	r0, r1
 8001186:	6023      	str	r3, [r4, #0]
 8001188:	f7ff fb2b 	bl	80007e2 <_close>
 800118c:	1c43      	adds	r3, r0, #1
 800118e:	d102      	bne.n	8001196 <_close_r+0x1a>
 8001190:	6823      	ldr	r3, [r4, #0]
 8001192:	b103      	cbz	r3, 8001196 <_close_r+0x1a>
 8001194:	602b      	str	r3, [r5, #0]
 8001196:	bd38      	pop	{r3, r4, r5, pc}
 8001198:	200000e4 	.word	0x200000e4

0800119c <_fstat_r>:
 800119c:	b538      	push	{r3, r4, r5, lr}
 800119e:	4c07      	ldr	r4, [pc, #28]	; (80011bc <_fstat_r+0x20>)
 80011a0:	2300      	movs	r3, #0
 80011a2:	4605      	mov	r5, r0
 80011a4:	4608      	mov	r0, r1
 80011a6:	4611      	mov	r1, r2
 80011a8:	6023      	str	r3, [r4, #0]
 80011aa:	f7ff fb26 	bl	80007fa <_fstat>
 80011ae:	1c43      	adds	r3, r0, #1
 80011b0:	d102      	bne.n	80011b8 <_fstat_r+0x1c>
 80011b2:	6823      	ldr	r3, [r4, #0]
 80011b4:	b103      	cbz	r3, 80011b8 <_fstat_r+0x1c>
 80011b6:	602b      	str	r3, [r5, #0]
 80011b8:	bd38      	pop	{r3, r4, r5, pc}
 80011ba:	bf00      	nop
 80011bc:	200000e4 	.word	0x200000e4

080011c0 <_isatty_r>:
 80011c0:	b538      	push	{r3, r4, r5, lr}
 80011c2:	4c06      	ldr	r4, [pc, #24]	; (80011dc <_isatty_r+0x1c>)
 80011c4:	2300      	movs	r3, #0
 80011c6:	4605      	mov	r5, r0
 80011c8:	4608      	mov	r0, r1
 80011ca:	6023      	str	r3, [r4, #0]
 80011cc:	f7ff fb25 	bl	800081a <_isatty>
 80011d0:	1c43      	adds	r3, r0, #1
 80011d2:	d102      	bne.n	80011da <_isatty_r+0x1a>
 80011d4:	6823      	ldr	r3, [r4, #0]
 80011d6:	b103      	cbz	r3, 80011da <_isatty_r+0x1a>
 80011d8:	602b      	str	r3, [r5, #0]
 80011da:	bd38      	pop	{r3, r4, r5, pc}
 80011dc:	200000e4 	.word	0x200000e4

080011e0 <_lseek_r>:
 80011e0:	b538      	push	{r3, r4, r5, lr}
 80011e2:	4c07      	ldr	r4, [pc, #28]	; (8001200 <_lseek_r+0x20>)
 80011e4:	4605      	mov	r5, r0
 80011e6:	4608      	mov	r0, r1
 80011e8:	4611      	mov	r1, r2
 80011ea:	2200      	movs	r2, #0
 80011ec:	6022      	str	r2, [r4, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	f7ff fb1e 	bl	8000830 <_lseek>
 80011f4:	1c43      	adds	r3, r0, #1
 80011f6:	d102      	bne.n	80011fe <_lseek_r+0x1e>
 80011f8:	6823      	ldr	r3, [r4, #0]
 80011fa:	b103      	cbz	r3, 80011fe <_lseek_r+0x1e>
 80011fc:	602b      	str	r3, [r5, #0]
 80011fe:	bd38      	pop	{r3, r4, r5, pc}
 8001200:	200000e4 	.word	0x200000e4

08001204 <__malloc_lock>:
 8001204:	4770      	bx	lr

08001206 <__malloc_unlock>:
 8001206:	4770      	bx	lr

08001208 <_read_r>:
 8001208:	b538      	push	{r3, r4, r5, lr}
 800120a:	4c07      	ldr	r4, [pc, #28]	; (8001228 <_read_r+0x20>)
 800120c:	4605      	mov	r5, r0
 800120e:	4608      	mov	r0, r1
 8001210:	4611      	mov	r1, r2
 8001212:	2200      	movs	r2, #0
 8001214:	6022      	str	r2, [r4, #0]
 8001216:	461a      	mov	r2, r3
 8001218:	f7ff faaa 	bl	8000770 <_read>
 800121c:	1c43      	adds	r3, r0, #1
 800121e:	d102      	bne.n	8001226 <_read_r+0x1e>
 8001220:	6823      	ldr	r3, [r4, #0]
 8001222:	b103      	cbz	r3, 8001226 <_read_r+0x1e>
 8001224:	602b      	str	r3, [r5, #0]
 8001226:	bd38      	pop	{r3, r4, r5, pc}
 8001228:	200000e4 	.word	0x200000e4

0800122c <_init>:
 800122c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800122e:	bf00      	nop
 8001230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001232:	bc08      	pop	{r3}
 8001234:	469e      	mov	lr, r3
 8001236:	4770      	bx	lr

08001238 <_fini>:
 8001238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800123a:	bf00      	nop
 800123c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800123e:	bc08      	pop	{r3}
 8001240:	469e      	mov	lr, r3
 8001242:	4770      	bx	lr
